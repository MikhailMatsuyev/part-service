{"version":3,"sources":["ng://@material-extended/mde/lib/popover/popover-animations.ts","ng://@material-extended/mde/lib/popover/popover.ts","ng://@material-extended/mde/lib/popover/popover-errors.ts","ng://@material-extended/mde/lib/popover/popover-trigger.ts","ng://@material-extended/mde/lib/popover/popover-target.ts","ng://@material-extended/mde/lib/popover/popover-module.ts"],"names":["transformPopover","trigger","state","style","opacity","transform","transition","animate","MdePopover","_elementRef","this","EventEmitter","setPositionClasses","prototype","_positionX","value","Error","throwMdePopoverInvalidPositionX","_positionY","throwMdePopoverInvalidPositionY","_triggerEvent","v","_enterDelay","_leaveDelay","_overlapTrigger","_targetOffsetX","_targetOffsetY","_arrowOffsetX","_arrowWidth","_arrowColor","_closeOnClick","_focusTrapEnabled","classes","length","_classList","split","reduce","obj","className","nativeElement","panelClass","ngOnDestroy","_emitCloseEvent","close","complete","_handleKeydown","event","keyCode","ESCAPE","emit","onClick","closeOnClick","onMouseOver","triggerEvent","closeDisabled","onMouseLeave","setCurrentStyles","popoverArrowStyles","right","positionX","arrowOffsetX","arrowWidth","left","border-top","positionY","arrowColor","border-right","undefined","border-bottom","border-left","popoverContentStyles","padding-top","overlapTrigger","padding-bottom","margin-top","containerPositioning","posX","posY","Component","args","selector","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","animations","exportAs","ElementRef","HostBinding","Input","Output","ViewChild","TemplateRef","MdePopoverTrigger","_overlay","_viewContainerRef","_dir","ngAfterViewInit","_this","_checkPopover","_setCurrentConfig","popover","subscribe","closePopover","destroyPopover","enterDelay","leaveDelay","targetOffsetX","targetOffsetY","Object","defineProperty","_popoverOpen","togglePopover","onMouseEnter","_halt","_mouseoverTimer","setTimeout","openPopover","clearTimeout","_createOverlay","attach","_portal","_subscribeToBackdrop","_initPopover","_overlayRef","detach","_backdropSubscription","unsubscribe","_resetPopover","dispose","_cleanUpSubscriptions","focus","backdropClick","_setIsPopoverOpen","_openedByMouse","isOpen","opened","closed","throwMdePopoverMissingError","TemplatePortal","templateRef","config","_getOverlayConfig","_subscribeToPositions","create","overlayState","OverlayConfig","positionStrategy","_getPosition","hasBackdrop","backdropClass","direction","dir","scrollStrategy","scrollStrategies","reposition","position","_positionSubscription","positionChanges","change","posisionX","connectionPair","overlayX","posisionY","overlayY","_a","tslib_1","__read","originX","originFallbackX","_b","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetX","offsetY","isNaN","Number","element","targetElement","flexibleConnectedTo","withPositions","withDefaultOffsetX","withDefaultOffsetY","_handleMousedown","isFakeMousedownFromScreenReader","Directive","Overlay","ViewContainerRef","Directionality","decorators","type","Optional","HostListener","MdePopoverTarget","MdePopoverModule","NgModule","imports","OverlayModule","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Below are all the animations for the md-popover component.\r\n * Animation duration and timing values are based on AngularJS Material.\r\n */\r\n\r\n/**\r\n * This animation controls the popover panel's entry and exit from the page.\r\n *\r\n * When the popover panel is added to the DOM, it scales in and fades in its border.\r\n *\r\n * When the popover panel is removed from the DOM, it simply fades out after a brief\r\n * delay to display the ripple.\r\n */\r\n\r\nexport const transformPopover: AnimationTriggerMetadata = trigger('transformPopover', [\r\n  state('enter', style({\r\n    opacity: 1,\r\n    transform: `scale(1)`\r\n  })),\r\n  transition('void => *', [\r\n    style({\r\n      opacity: 0,\r\n      transform: `scale(0)`\r\n    }),\r\n    animate(`200ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\r\n  ]),\r\n  transition('* => void', [\r\n    animate('50ms 100ms linear', style({opacity: 0}))\r\n  ])\r\n]);\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  HostBinding,\r\n} from '@angular/core';\r\n\r\nimport { ESCAPE } from '@angular/cdk/keycodes';\r\n\r\nimport { MdePopoverPositionX, MdePopoverPositionY, MdePopoverTriggerEvent } from './popover-types';\r\nimport { throwMdePopoverInvalidPositionX, throwMdePopoverInvalidPositionY } from './popover-errors';\r\nimport { MdePopoverPanel } from './popover-interfaces';\r\nimport { transformPopover } from './popover-animations';\r\n\r\nimport { AnimationEvent } from '@angular/animations';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'mde-popover',\r\n  template: `<ng-template>\r\n  <div class=\"mde-popover-panel\" role=\"dialog\" [class.mde-popover-overlap]=\"overlapTrigger\"\r\n       [ngClass]=\"_classList\" [ngStyle]=\"popoverPanelStyles\" (keydown)=\"_handleKeydown($event)\"\r\n       (click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\"\r\n       [@transformPopover]=\"'enter'\">\r\n    <div class=\"mde-popover-direction-arrow\" [ngStyle]=\"popoverArrowStyles\" *ngIf=\"!overlapTrigger\"></div>\r\n    <div class=\"mde-popover-content\" [ngStyle]=\"popoverContentStyles\" cdkTrapFocus=\"focusTrapEnabled\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`,\r\n  styles: [`.mde-popover-panel{display:flex;flex-direction:column;max-height:calc(100vh + 48px)}.mde-popover-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mde-popover-below .mde-popover-direction-arrow{position:absolute;bottom:0;width:0;height:0;border-bottom-width:0!important;z-index:99999}.mde-popover-above .mde-popover-direction-arrow{position:absolute;top:0;width:0;height:0;border-top-width:0!important;z-index:99999}.mde-popover-after .mde-popover-direction-arrow{left:20px}.mde-popover-before .mde-popover-direction-arrow{right:20px}`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    transformPopover\r\n  ],\r\n  exportAs: 'mdePopover'\r\n})\r\nexport class MdePopover implements MdePopoverPanel, OnDestroy { // tslint:disable-line:component-class-suffix\r\n\r\n  @HostBinding('attr.role') role = 'dialog';\r\n\r\n  /** Settings for popover, view setters and getters for more detail */\r\n  private _positionX: MdePopoverPositionX = 'after';\r\n  private _positionY: MdePopoverPositionY = 'below';\r\n  private _triggerEvent: MdePopoverTriggerEvent = 'hover';\r\n  private _enterDelay = 200;\r\n  private _leaveDelay = 200;\r\n  private _overlapTrigger = true;\r\n  private _targetOffsetX = 0;\r\n  private _targetOffsetY = 0;\r\n  private _arrowOffsetX = 20;\r\n  private _arrowWidth = 8;\r\n  private _arrowColor = 'rgba(0, 0, 0, 0.12)';\r\n  private _closeOnClick = true;\r\n  private _focusTrapEnabled = true;\r\n\r\n  /** Config object to be passed into the popover's ngClass */\r\n  _classList: {[key: string]: boolean} = {};\r\n\r\n  // TODO: Write comment description\r\n  /** */\r\n  public containerPositioning = false;\r\n\r\n  /** Closing disabled on popover */\r\n  public closeDisabled = false;\r\n\r\n  /** Config object to be passed into the popover's arrow ngStyle */\r\n  public popoverPanelStyles: {};\r\n\r\n  /** Config object to be passed into the popover's arrow ngStyle */\r\n  public popoverArrowStyles: {};\r\n\r\n  /** Config object to be passed into the popover's content ngStyle */\r\n  public popoverContentStyles: {};\r\n\r\n  /** Emits the current animation state whenever it changes. */\r\n  _onAnimationStateChange = new EventEmitter<AnimationEvent>();\r\n\r\n\r\n  /** Position of the popover in the X axis. */\r\n  @Input('mdePopoverPositionX')\r\n  get positionX() { return this._positionX; }\r\n  set positionX(value: MdePopoverPositionX) {\r\n    if (value !== 'before' && value !== 'after') {\r\n      throwMdePopoverInvalidPositionX();\r\n    }\r\n    this._positionX = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** Position of the popover in the Y axis. */\r\n  @Input('mdePopoverPositionY')\r\n  get positionY() { return this._positionY; }\r\n  set positionY(value: MdePopoverPositionY) {\r\n    if (value !== 'above' && value !== 'below') {\r\n      throwMdePopoverInvalidPositionY();\r\n    }\r\n    this._positionY = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  /** Popover trigger event */\r\n  @Input('mdePopoverTriggerOn')\r\n  get triggerEvent(): MdePopoverTriggerEvent { return this._triggerEvent; }\r\n  set triggerEvent(v: MdePopoverTriggerEvent) { this._triggerEvent = v; }\r\n\r\n  /** Popover enter delay */\r\n  @Input('mdePopoverEnterDelay')\r\n  get enterDelay(): number { return this._enterDelay; }\r\n  set enterDelay(v: number) { this._enterDelay = v; }\r\n\r\n  /** Popover leave delay */\r\n  @Input('mdePopoverLeaveDelay')\r\n  get leaveDelay(): number { return this._leaveDelay; }\r\n  set leaveDelay(v: number) { this._leaveDelay = v; }\r\n\r\n  /** Popover overlap trigger */\r\n  @Input('mdePopoverOverlapTrigger')\r\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\r\n  set overlapTrigger(v: boolean) { this._overlapTrigger = v; }\r\n\r\n  /** Popover target offset x */\r\n  @Input('mdePopoverOffsetX')\r\n  get targetOffsetX(): number { return this._targetOffsetX; }\r\n  set targetOffsetX(v: number) { this._targetOffsetX = v; }\r\n\r\n  /** Popover target offset y */\r\n  @Input('mdePopoverOffsetY')\r\n  get targetOffsetY(): number { return this._targetOffsetY; }\r\n  set targetOffsetY(v: number) { this._targetOffsetY = v; }\r\n\r\n  /** Popover arrow offset x */\r\n  @Input('mdePopoverArrowOffsetX')\r\n  get arrowOffsetX(): number { return this._arrowOffsetX; }\r\n  set arrowOffsetX(v: number) { this._arrowOffsetX = v; }\r\n\r\n  /** Popover arrow width */\r\n  @Input('mdePopoverArrowWidth')\r\n  get arrowWidth(): number { return this._arrowWidth; }\r\n  set arrowWidth(v: number) { this._arrowWidth = v; }\r\n\r\n  /** Popover arrow color */\r\n  @Input('mdePopoverArrowColor')\r\n  get arrowColor(): string { return this._arrowColor; }\r\n  set arrowColor(v: string) { this._arrowColor = v; }\r\n\r\n  /**\r\n   * Popover container close on click\r\n   * default: true\r\n   */\r\n  @Input('mdePopoverCloseOnClick')\r\n  get closeOnClick(): boolean { return this._closeOnClick; }\r\n  set closeOnClick(v: boolean) { this._closeOnClick = v; }\r\n\r\n\r\n  /**\r\n   * Popover focus trap using cdkTrapFocus\r\n   * default: true\r\n   */\r\n  @Input('mdeFocusTrapEnabled')\r\n  get focusTrapEnabled(): boolean { return this._focusTrapEnabled; }\r\n  set focusTrapEnabled(v: boolean) { this._focusTrapEnabled = v; }\r\n\r\n\r\n  /**\r\n   * This method takes classes set on the host md-popover element and applies them on the\r\n   * popover template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing popover from outside the component.\r\n   * @param classes list of class names\r\n   */\r\n  @Input('class')\r\n  set panelClass(classes: string) {\r\n    if (classes && classes.length) {\r\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\r\n        obj[className] = true;\r\n        return obj;\r\n      }, {});\r\n\r\n      this._elementRef.nativeElement.className = '';\r\n      this.setPositionClasses();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method takes classes set on the host md-popover element and applies them on the\r\n   * popover template that displays in the overlay container.  Otherwise, it's difficult\r\n   * to style the containing popover from outside the component.\r\n   * @deprecated Use `panelClass` instead.\r\n   */\r\n  @Input()\r\n  get classList(): string { return this.panelClass; }\r\n  set classList(classes: string) { this.panelClass = classes; }\r\n\r\n  /** Event emitted when the popover is closed. */\r\n  @Output() close = new EventEmitter<void>();\r\n\r\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\r\n\r\n  constructor(private _elementRef: ElementRef) {\r\n    this.setPositionClasses();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._emitCloseEvent();\r\n    this.close.complete();\r\n  }\r\n\r\n\r\n  /** Handle a keyboard event from the popover, delegating to the appropriate action. */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case ESCAPE:\r\n        this._emitCloseEvent();\r\n        return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This emits a close event to which the trigger is subscribed. When emitted, the\r\n   * trigger will close the popover.\r\n   */\r\n  _emitCloseEvent(): void {\r\n    this.close.emit();\r\n  }\r\n\r\n  /** Close popover on click if closeOnClick is true */\r\n  onClick() {\r\n    if (this.closeOnClick) {\r\n      this._emitCloseEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\r\n   * https://github.com/angular/material2/pull/5493#issuecomment-313085323\r\n   */\r\n  /** Disables close of popover when leaving trigger element and mouse over the popover */\r\n  onMouseOver() {\r\n    if (this.triggerEvent === 'hover') {\r\n      this.closeDisabled = true;\r\n    }\r\n  }\r\n  /** Enables close of popover when mouse leaving popover element */\r\n  onMouseLeave() {\r\n    if (this.triggerEvent === 'hover') {\r\n      this.closeDisabled = false;\r\n      this._emitCloseEvent();\r\n    }\r\n  }\r\n\r\n  // TODO: Refactor how styles are set and updated on the component, use best practices.\r\n  // TODO: If arrow left and right positioning is requested, see if flex direction can be used to work with order.\r\n  /** Sets the current styles for the popover to allow for dynamically changing settings */\r\n  setCurrentStyles() {\r\n\r\n    // TODO: See if arrow position can be calculated automatically and allow override.\r\n    // TODO: See if flex order is a better alternative to position arrow top or bottom.\r\n    this.popoverArrowStyles = {\r\n      'right': this.positionX === 'before' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',\r\n      'left': this.positionX === 'after' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',\r\n      'border-top': this.positionY === 'below' ?\r\n        this.arrowWidth + 'px solid ' + this.arrowColor : '0px solid transparent',\r\n      'border-right': 'undefined' === undefined ?\r\n        this.arrowWidth + 'px solid ' + this.arrowColor :\r\n        this.arrowWidth + 'px solid transparent',\r\n      'border-bottom': this.positionY === 'above' ?\r\n        this.arrowWidth + 'px solid ' + this.arrowColor :\r\n        this.arrowWidth + 'px solid transparent',\r\n      'border-left': 'undefined' === undefined ?\r\n        this.arrowWidth + 'px solid ' + this.arrowColor :\r\n        this.arrowWidth + 'px solid transparent',\r\n    };\r\n\r\n    // TODO: Remove if flex order is added.\r\n    this.popoverContentStyles = {\r\n      'padding-top': this.overlapTrigger === true ? '0px' : this.arrowWidth + 'px',\r\n      'padding-bottom': this.overlapTrigger === true ? '0px' : (this.arrowWidth) + 'px',\r\n      'margin-top': this.overlapTrigger === false && this.positionY === 'below' && this.containerPositioning === false ?\r\n        -(this.arrowWidth * 2) + 'px' : '0px'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * It's necessary to set position-based classes to ensure the popover panel animation\r\n   * folds out from the correct direction.\r\n   */\r\n  setPositionClasses(posX = this.positionX, posY = this.positionY): void {\r\n    this._classList['mde-popover-before'] = posX === 'before';\r\n    this._classList['mde-popover-after'] = posX === 'after';\r\n    this._classList['mde-popover-above'] = posY === 'above';\r\n    this._classList['mde-popover-below'] = posY === 'below';\r\n  }\r\n}\r\n","/**\r\n * Throws an exception for the case when popover trigger doesn't have a valid mde-popover instance\r\n */\r\nexport function throwMdePopoverMissingError() {\r\n  throw Error(`mde-popover-trigger: must pass in an mde-popover instance.\r\n\r\n    Example:\r\n      <mde-popover #popover=\"mdePopover\"></mde-popover>\r\n      <button [mdePopoverTriggerFor]=\"popover\"></button>`);\r\n}\r\n\r\n/**\r\n * Throws an exception for the case when popover's mdePopoverPositionX value isn't valid.\r\n * In other words, it doesn't match 'before' or 'after'.\r\n */\r\nexport function throwMdePopoverInvalidPositionX() {\r\n  throw Error(`mdePopoverPositionX value must be either 'before' or after'.\r\n      Example: <mde-popover mdePopoverPositionX=\"before\" #popover=\"mdePopover\"></mde-popover>`);\r\n}\r\n\r\n/**\r\n * Throws an exception for the case when popover's mdePopoverPositionY value isn't valid.\r\n * In other words, it doesn't match 'above' or 'below'.\r\n */\r\nexport function throwMdePopoverInvalidPositionY() {\r\n  throw Error(`mdePopoverPositionY value must be either 'above' or below'.\r\n      Example: <mde-popover mdePopoverPositionY=\"above\" #popover=\"mdePopover\"></mde-popover>`);\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewContainerRef,\r\n  HostListener,\r\n  HostBinding,\r\n} from '@angular/core';\r\n\r\n\r\nimport { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport {\r\n  ConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  HorizontalConnectionPos,\r\n  VerticalConnectionPos,\r\n  FlexibleConnectedPositionStrategy\r\n} from '@angular/cdk/overlay';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { MdePopoverPanel, MdeTarget } from './popover-interfaces';\r\nimport { MdePopoverPositionX, MdePopoverPositionY, MdePopoverTriggerEvent } from './popover-types';\r\nimport { throwMdePopoverMissingError } from './popover-errors';\r\n\r\n\r\n\r\n/**\r\n * This directive is intended to be used in conjunction with an mde-popover tag. It is\r\n * responsible for toggling the display of the provided popover instance.\r\n */\r\n\r\n@Directive({\r\n  selector: '[mdePopoverTriggerFor]',\r\n  exportAs: 'mdePopoverTrigger'\r\n})\r\nexport class MdePopoverTrigger implements AfterViewInit, OnDestroy { // tslint:disable-line:directive-class-suffix\r\n\r\n    @HostBinding('attr.aria-haspopup') ariaHaspopup = true;\r\n\r\n    private _portal: TemplatePortal<any>;\r\n    private _overlayRef: OverlayRef | null = null;\r\n    private _popoverOpen = false;\r\n    private _halt = false;\r\n    private _backdropSubscription: Subscription;\r\n    private _positionSubscription: Subscription;\r\n\r\n    private _mouseoverTimer: any;\r\n\r\n    // tracking input type is necessary so it's possible to only auto-focus\r\n    // the first item of the list when the popover is opened via the keyboard\r\n    private _openedByMouse = false;\r\n\r\n    /** References the popover instance that the trigger is associated with. */\r\n    @Input('mdePopoverTriggerFor') popover: MdePopoverPanel;\r\n\r\n    /** References the popover target instance that the trigger is associated with. */\r\n    @Input('mdePopoverTargetAt') targetElement: MdeTarget;\r\n\r\n    /** Position of the popover in the X axis */\r\n    @Input('mdePopoverPositionX') positionX: MdePopoverPositionX;\r\n\r\n    /** Position of the popover in the Y axis */\r\n    @Input('mdePopoverPositionY') positionY: MdePopoverPositionY;\r\n\r\n    /** Popover trigger event */\r\n    @Input('mdePopoverTriggerOn') triggerEvent: MdePopoverTriggerEvent;\r\n\r\n    /** Popover delay */\r\n    @Input('mdePopoverEnterDelay') enterDelay: number;\r\n\r\n    /** Popover delay */\r\n    @Input('mdePopoverLeaveDelay') leaveDelay: number;\r\n\r\n    /** Popover overlap trigger */\r\n    @Input('mdePopoverOverlapTrigger') overlapTrigger: boolean;\r\n\r\n    /** Popover target offset x */\r\n    @Input('mdePopoverOffsetX') targetOffsetX: number;\r\n\r\n    /** Popover target offset y */\r\n    @Input('mdePopoverOffsetY') targetOffsetY: number;\r\n\r\n    /** Popover arrow offset x */\r\n    @Input('mdePopoverArrowOffsetX') arrowOffsetX: number;\r\n\r\n\r\n    /** Popover arrow width */\r\n    @Input('mdePopoverArrowWidth') arrowWidth: number;\r\n\r\n\r\n    /** Popover arrow color */\r\n    @Input('mdePopoverArrowColor') arrowColor: string;\r\n\r\n\r\n    /** Popover container close on click */\r\n    @Input('mdePopoverCloseOnClick') closeOnClick: boolean;\r\n\r\n\r\n    /** Event emitted when the associated popover is opened. */\r\n    @Output() opened = new EventEmitter<void>();\r\n\r\n    /** Event emitted when the associated popover is closed. */\r\n    @Output() closed = new EventEmitter<void>();\r\n\r\n\r\n    constructor(private _overlay: Overlay, public _elementRef: ElementRef,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Optional() private _dir: Directionality) { }\r\n\r\n    ngAfterViewInit() {\r\n        this._checkPopover();\r\n        this._setCurrentConfig();\r\n        this.popover.close.subscribe(() => this.closePopover());\r\n    }\r\n\r\n    ngOnDestroy() { this.destroyPopover(); }\r\n\r\n\r\n    private _setCurrentConfig() {\r\n\r\n        if (this.positionX === 'before' || this.positionX === 'after') {\r\n          this.popover.positionX = this.positionX;\r\n        }\r\n\r\n        if (this.positionY === 'above' || this.positionY === 'below') {\r\n          this.popover.positionY = this.positionY;\r\n        }\r\n\r\n        if (this.triggerEvent) {\r\n            this.popover.triggerEvent = this.triggerEvent;\r\n        }\r\n\r\n        if (this.enterDelay) {\r\n          this.popover.enterDelay = this.enterDelay;\r\n        }\r\n\r\n        if (this.leaveDelay) {\r\n          this.popover.leaveDelay = this.leaveDelay;\r\n        }\r\n\r\n        if (this.overlapTrigger === true || this.overlapTrigger === false) {\r\n            this.popover.overlapTrigger = this.overlapTrigger;\r\n        }\r\n\r\n        if (this.targetOffsetX) {\r\n            this.popover.targetOffsetX = this.targetOffsetX;\r\n        }\r\n\r\n        if (this.targetOffsetY) {\r\n            this.popover.targetOffsetY = this.targetOffsetY;\r\n        }\r\n\r\n        if (this.arrowOffsetX) {\r\n            this.popover.arrowOffsetX = this.arrowOffsetX;\r\n        }\r\n\r\n        if (this.arrowWidth) {\r\n            this.popover.arrowWidth = this.arrowWidth;\r\n        }\r\n\r\n        if (this.arrowColor) {\r\n            this.popover.arrowColor = this.arrowColor;\r\n        }\r\n\r\n        if (this.closeOnClick === true || this.closeOnClick === false) {\r\n            this.popover.closeOnClick = this.closeOnClick;\r\n        }\r\n\r\n        this.popover.setCurrentStyles();\r\n    }\r\n\r\n\r\n    /** Whether the popover is open. */\r\n    get popoverOpen(): boolean { return this._popoverOpen; }\r\n\r\n    @HostListener('click') onClick() {\r\n      if (this.popover.triggerEvent === 'click') {\r\n          // this.popover.setCurrentStyles();\r\n          // this._setCurrentConfig();\r\n          this.togglePopover();\r\n      }\r\n    }\r\n\r\n    @HostListener('mouseenter') onMouseEnter() {\r\n      this._halt = false;\r\n      if (this.popover.triggerEvent === 'hover') {\r\n          this._mouseoverTimer = setTimeout(() => {\r\n              this.openPopover();\r\n          }, this.popover.enterDelay);\r\n      }\r\n    }\r\n\r\n    @HostListener('mouseleave') onMouseLeave() {\r\n      if (this.popover.triggerEvent === 'hover') {\r\n        if (this._mouseoverTimer) {\r\n            clearTimeout(this._mouseoverTimer);\r\n            this._mouseoverTimer = null;\r\n        }\r\n        if (this._popoverOpen) {\r\n            setTimeout(() => {\r\n                if (!this.popover.closeDisabled) {\r\n                    this.closePopover();\r\n                }\r\n            }, this.popover.leaveDelay);\r\n        } else {\r\n          this._halt = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    /** Toggles the popover between the open and closed states. */\r\n    togglePopover(): void {\r\n        return this._popoverOpen ? this.closePopover() : this.openPopover();\r\n    }\r\n\r\n    /** Opens the popover. */\r\n    openPopover(): void {\r\n        if (!this._popoverOpen && !this._halt) {\r\n            this._createOverlay().attach(this._portal);\r\n\r\n            /** Only subscribe to backdrop if trigger event is click */\r\n            if (this.triggerEvent === 'click') {\r\n              this._subscribeToBackdrop();\r\n            }\r\n\r\n            this._initPopover();\r\n        }\r\n    }\r\n\r\n    /** Closes the popover. */\r\n    closePopover(): void {\r\n        if (this._overlayRef) {\r\n          this._overlayRef.detach();\r\n\r\n          /** Only unsubscribe to backdrop if trigger event is click */\r\n          if (this.triggerEvent === 'click') {\r\n            this._backdropSubscription.unsubscribe();\r\n          }\r\n\r\n          this._resetPopover();\r\n        }\r\n    }\r\n\r\n    /** Removes the popover from the DOM. */\r\n    destroyPopover(): void {\r\n        if (this._overlayRef) {\r\n          this._overlayRef.dispose();\r\n          this._overlayRef = null;\r\n          this._cleanUpSubscriptions();\r\n        }\r\n    }\r\n\r\n    /** Focuses the popover trigger. */\r\n    focus() {\r\n        this._elementRef.nativeElement.focus();\r\n    }\r\n\r\n    /** The text direction of the containing app. */\r\n    get dir(): Direction {\r\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n    }\r\n\r\n    /**\r\n    * This method ensures that the popover closes when the overlay backdrop is clicked.\r\n    * We do not use first() here because doing so would not catch clicks from within\r\n    * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe\r\n    * explicitly when the popover is closed or destroyed.\r\n    */\r\n    private _subscribeToBackdrop(): void {\r\n        if (this._overlayRef) {\r\n          this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\r\n            this.popover._emitCloseEvent();\r\n          });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method sets the popover state to open and focuses the first item if\r\n    * the popover was opened via the keyboard.\r\n    */\r\n    private _initPopover(): void {\r\n        this._setIsPopoverOpen(true);\r\n    }\r\n\r\n    /**\r\n    * This method resets the popover when it's closed, most importantly restoring\r\n    * focus to the popover trigger if the popover was opened via the keyboard.\r\n    */\r\n    private _resetPopover(): void {\r\n        this._setIsPopoverOpen(false);\r\n\r\n        // Focus only needs to be reset to the host element if the popover was opened\r\n        // by the keyboard and manually shifted to the first popover item.\r\n        if (!this._openedByMouse) {\r\n          this.focus();\r\n        }\r\n        this._openedByMouse = false;\r\n    }\r\n\r\n    /** set state rather than toggle to support triggers sharing a popover */\r\n    private _setIsPopoverOpen(isOpen: boolean): void {\r\n        this._popoverOpen = isOpen;\r\n        this._popoverOpen ? this.opened.emit() : this.closed.emit();\r\n    }\r\n\r\n    /**\r\n    *  This method checks that a valid instance of MdPopover has been passed into\r\n    *  mdPopoverTriggerFor. If not, an exception is thrown.\r\n    */\r\n    private _checkPopover() {\r\n        if (!this.popover) {\r\n          throwMdePopoverMissingError();\r\n        }\r\n    }\r\n\r\n    /**\r\n    *  This method creates the overlay from the provided popover's template and saves its\r\n    *  OverlayRef so that it can be attached to the DOM when openPopover is called.\r\n    */\r\n    private _createOverlay(): OverlayRef {\r\n        if (!this._overlayRef) {\r\n          this._portal = new TemplatePortal(this.popover.templateRef, this._viewContainerRef);\r\n          const config = this._getOverlayConfig();\r\n          this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\r\n          this._overlayRef = this._overlay.create(config);\r\n        }\r\n\r\n        return this._overlayRef;\r\n    }\r\n\r\n    /**\r\n    * This method builds the configuration object needed to create the overlay, the OverlayConfig.\r\n    * @returns OverlayConfig\r\n    */\r\n    private _getOverlayConfig(): OverlayConfig {\r\n        const overlayState = new OverlayConfig();\r\n        overlayState.positionStrategy = this._getPosition();\r\n\r\n        /** Display overlay backdrop if trigger event is click */\r\n        if (this.triggerEvent === 'click') {\r\n          overlayState.hasBackdrop = true;\r\n          overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\r\n        }\r\n\r\n        overlayState.direction = this.dir;\r\n        overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\r\n        return overlayState;\r\n    }\r\n\r\n    /**\r\n    * Listens to changes in the position of the overlay and sets the correct classes\r\n    * on the popover based on the new position. This ensures the animation origin is always\r\n    * correct, even if a fallback position is used for the overlay.\r\n    */\r\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\r\n        this._positionSubscription = position.positionChanges.subscribe(change => {\r\n            const posisionX: MdePopoverPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\r\n            let posisionY: MdePopoverPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\r\n\r\n            if (!this.popover.overlapTrigger) {\r\n                posisionY = posisionY === 'below' ? 'above' : 'below';\r\n            }\r\n\r\n            this.popover.positionX = posisionX;\r\n            this.popover.positionY = posisionY;\r\n            this.popover.setCurrentStyles();\r\n\r\n            this.popover.setPositionClasses(posisionX, posisionY);\r\n        });\r\n    }\r\n\r\n    /**\r\n    * This method builds the position strategy for the overlay, so the popover is properly connected\r\n    * to the trigger.\r\n    * @returns ConnectedPositionStrategy\r\n    */\r\n    private _getPosition(): FlexibleConnectedPositionStrategy {\r\n        const [originX, originFallbackX]: HorizontalConnectionPos[] =\r\n          this.popover.positionX === 'before' ? ['end', 'start'] : ['start', 'end'];\r\n\r\n        const [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\r\n          this.popover.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\r\n\r\n        // let originY = overlayY;\r\n        // let fallbackOriginY = overlayFallbackY;\r\n\r\n        let originY = overlayY;\r\n        let originFallbackY = overlayFallbackY;\r\n\r\n        const overlayX = originX;\r\n        const overlayFallbackX = originFallbackX;\r\n\r\n        // let [originY, originFallbackY] = [overlayY, overlayFallbackY];\r\n        // let [overlayX, overlayFallbackX] = [originX, originFallbackX];\r\n\r\n        /** Reverse overlayY and fallbackOverlayY when overlapTrigger is false */\r\n        if (!this.popover.overlapTrigger) {\r\n          originY = overlayY === 'top' ? 'bottom' : 'top';\r\n          originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\r\n        }\r\n\r\n        let offsetX = 0;\r\n        let offsetY = 0;\r\n\r\n        if (this.popover.targetOffsetX && !isNaN(Number(this.popover.targetOffsetX))) {\r\n          offsetX = Number(this.popover.targetOffsetX);\r\n          // offsetX = -16;\r\n        }\r\n\r\n        if (this.popover.targetOffsetY && !isNaN(Number(this.popover.targetOffsetY))) {\r\n          offsetY = Number(this.popover.targetOffsetY);\r\n          // offsetY = -10;\r\n        }\r\n\r\n        /**\r\n         * For overriding position element, when mdePopoverTargetAt has a valid element reference.\r\n         * Useful for sticking popover to parent element and offsetting arrow to trigger element.\r\n         * If undefined defaults to the trigger element reference.\r\n         */\r\n        let element = this._elementRef;\r\n        if (typeof this.targetElement !== 'undefined') {\r\n            this.popover.containerPositioning = true;\r\n            element = this.targetElement._elementRef;\r\n        }\r\n\r\n        return this._overlay.position()\r\n        .flexibleConnectedTo(element)\r\n        .withPositions([\r\n          {\r\n              originX,\r\n              originY,\r\n              overlayX,\r\n              overlayY,\r\n              offsetY\r\n          },\r\n          {\r\n              originX: originFallbackX,\r\n              originY,\r\n              overlayX: overlayFallbackX,\r\n              overlayY,\r\n              offsetY\r\n          },\r\n          {\r\n            originX,\r\n            originY: originFallbackY,\r\n            overlayX,\r\n            overlayY: overlayFallbackY,\r\n            offsetY: -offsetY\r\n          },\r\n          {\r\n            originX: originFallbackX,\r\n            originY: originFallbackY,\r\n            overlayX: overlayFallbackX,\r\n            overlayY: overlayFallbackY,\r\n            offsetY: -offsetY\r\n          }\r\n        ])\r\n        .withDefaultOffsetX(offsetX)\r\n        .withDefaultOffsetY(offsetY);\r\n        /*\r\n        return this._overlay.position()\r\n          .connectedTo(element,\r\n              {originX: posX, originY: originY},\r\n              {overlayX: posX, overlayY: overlayY})\r\n          .withFallbackPosition(\r\n              {originX: fallbackX, originY: originY},\r\n              {overlayX: fallbackX, overlayY: overlayY})\r\n          .withFallbackPosition(\r\n              {originX: posX, originY: fallbackOriginY},\r\n              {overlayX: posX, overlayY: fallbackOverlayY})\r\n          .withFallbackPosition(\r\n              {originX: fallbackX, originY: fallbackOriginY},\r\n              {overlayX: fallbackX, overlayY: fallbackOverlayY})\r\n          .withOffsetX(offsetX)\r\n          .withOffsetY(offsetY);\r\n          */\r\n    }\r\n\r\n    private _cleanUpSubscriptions(): void {\r\n        if (this._backdropSubscription) {\r\n            this._backdropSubscription.unsubscribe();\r\n        }\r\n        if (this._positionSubscription) {\r\n            this._positionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    @HostListener('mousedown') _handleMousedown(event: MouseEvent): void {\r\n        if (event && !isFakeMousedownFromScreenReader(event)) {\r\n            this._openedByMouse = true;\r\n        }\r\n    }\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n\r\n@Directive({\r\n  selector: 'mde-popover-target, [mdePopoverTarget]',\r\n  exportAs: 'mdePopoverTarget'\r\n})\r\nexport class MdePopoverTarget { // tslint:disable-line:directive-class-suffix\r\n\r\n  constructor(public _elementRef: ElementRef) { }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\n\r\nimport { MdePopover } from './popover';\r\nimport { MdePopoverTrigger } from './popover-trigger';\r\nimport { MdePopoverTarget } from './popover-target';\r\n\r\n@NgModule({\r\n  imports: [\r\n    OverlayModule,\r\n    CommonModule\r\n  ],\r\n  exports: [MdePopover, MdePopoverTrigger, MdePopoverTarget],\r\n  declarations: [MdePopover, MdePopoverTrigger, MdePopoverTarget],\r\n})\r\nexport class MdePopoverModule {}\r\n"]}