/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, ElementRef, ChangeDetectionStrategy, HostBinding, } from '@angular/core';
import { ESCAPE } from '@angular/cdk/keycodes';
import { throwMdePopoverInvalidPositionX, throwMdePopoverInvalidPositionY } from './popover-errors';
import { transformPopover } from './popover-animations';
var MdePopover = /** @class */ (function () {
    function MdePopover(_elementRef) {
        this._elementRef = _elementRef;
        // tslint:disable-line:component-class-suffix
        this.role = 'dialog';
        /**
         * Settings for popover, view setters and getters for more detail
         */
        this._positionX = 'after';
        this._positionY = 'below';
        this._triggerEvent = 'hover';
        this._enterDelay = 200;
        this._leaveDelay = 200;
        this._overlapTrigger = true;
        this._targetOffsetX = 0;
        this._targetOffsetY = 0;
        this._arrowOffsetX = 20;
        this._arrowWidth = 8;
        this._arrowColor = 'rgba(0, 0, 0, 0.12)';
        this._closeOnClick = true;
        this._focusTrapEnabled = true;
        /**
         * Config object to be passed into the popover's ngClass
         */
        this._classList = {};
        /**
         *
         */
        this.containerPositioning = false;
        /**
         * Closing disabled on popover
         */
        this.closeDisabled = false;
        /**
         * Emits the current animation state whenever it changes.
         */
        this._onAnimationStateChange = new EventEmitter();
        /**
         * Event emitted when the popover is closed.
         */
        this.close = new EventEmitter();
        this.setPositionClasses();
    }
    Object.defineProperty(MdePopover.prototype, "positionX", {
        get: /**
         * Position of the popover in the X axis.
         * @return {?}
         */
        function () { return this._positionX; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== 'before' && value !== 'after') {
                throwMdePopoverInvalidPositionX();
            }
            this._positionX = value;
            this.setPositionClasses();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "positionY", {
        get: /**
         * Position of the popover in the Y axis.
         * @return {?}
         */
        function () { return this._positionY; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== 'above' && value !== 'below') {
                throwMdePopoverInvalidPositionY();
            }
            this._positionY = value;
            this.setPositionClasses();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "triggerEvent", {
        get: /**
         * Popover trigger event
         * @return {?}
         */
        function () { return this._triggerEvent; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._triggerEvent = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "enterDelay", {
        get: /**
         * Popover enter delay
         * @return {?}
         */
        function () { return this._enterDelay; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._enterDelay = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "leaveDelay", {
        get: /**
         * Popover leave delay
         * @return {?}
         */
        function () { return this._leaveDelay; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._leaveDelay = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "overlapTrigger", {
        get: /**
         * Popover overlap trigger
         * @return {?}
         */
        function () { return this._overlapTrigger; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._overlapTrigger = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "targetOffsetX", {
        get: /**
         * Popover target offset x
         * @return {?}
         */
        function () { return this._targetOffsetX; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._targetOffsetX = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "targetOffsetY", {
        get: /**
         * Popover target offset y
         * @return {?}
         */
        function () { return this._targetOffsetY; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._targetOffsetY = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "arrowOffsetX", {
        get: /**
         * Popover arrow offset x
         * @return {?}
         */
        function () { return this._arrowOffsetX; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._arrowOffsetX = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "arrowWidth", {
        get: /**
         * Popover arrow width
         * @return {?}
         */
        function () { return this._arrowWidth; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._arrowWidth = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "arrowColor", {
        get: /**
         * Popover arrow color
         * @return {?}
         */
        function () { return this._arrowColor; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._arrowColor = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "closeOnClick", {
        get: /**
         * Popover container close on click
         * default: true
         * @return {?}
         */
        function () { return this._closeOnClick; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._closeOnClick = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "focusTrapEnabled", {
        get: /**
         * Popover focus trap using cdkTrapFocus
         * default: true
         * @return {?}
         */
        function () { return this._focusTrapEnabled; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._focusTrapEnabled = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "panelClass", {
        set: /**
         * This method takes classes set on the host md-popover element and applies them on the
         * popover template that displays in the overlay container.  Otherwise, it's difficult
         * to style the containing popover from outside the component.
         * @param {?} classes list of class names
         * @return {?}
         */
        function (classes) {
            if (classes && classes.length) {
                this._classList = classes.split(' ').reduce(function (obj, className) {
                    obj[className] = true;
                    return obj;
                }, {});
                this._elementRef.nativeElement.className = '';
                this.setPositionClasses();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdePopover.prototype, "classList", {
        get: /**
         * This method takes classes set on the host md-popover element and applies them on the
         * popover template that displays in the overlay container.  Otherwise, it's difficult
         * to style the containing popover from outside the component.
         * @deprecated Use `panelClass` instead.
         * @return {?}
         */
        function () { return this.panelClass; },
        set: /**
         * @param {?} classes
         * @return {?}
         */
        function (classes) { this.panelClass = classes; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdePopover.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._emitCloseEvent();
        this.close.complete();
    };
    /** Handle a keyboard event from the popover, delegating to the appropriate action. */
    /**
     * Handle a keyboard event from the popover, delegating to the appropriate action.
     * @param {?} event
     * @return {?}
     */
    MdePopover.prototype._handleKeydown = /**
     * Handle a keyboard event from the popover, delegating to the appropriate action.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.keyCode) {
            case ESCAPE:
                this._emitCloseEvent();
                return;
        }
    };
    /**
     * This emits a close event to which the trigger is subscribed. When emitted, the
     * trigger will close the popover.
     */
    /**
     * This emits a close event to which the trigger is subscribed. When emitted, the
     * trigger will close the popover.
     * @return {?}
     */
    MdePopover.prototype._emitCloseEvent = /**
     * This emits a close event to which the trigger is subscribed. When emitted, the
     * trigger will close the popover.
     * @return {?}
     */
    function () {
        this.close.emit();
    };
    /** Close popover on click if closeOnClick is true */
    /**
     * Close popover on click if closeOnClick is true
     * @return {?}
     */
    MdePopover.prototype.onClick = /**
     * Close popover on click if closeOnClick is true
     * @return {?}
     */
    function () {
        if (this.closeOnClick) {
            this._emitCloseEvent();
        }
    };
    /**
     * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.
     * https://github.com/angular/material2/pull/5493#issuecomment-313085323
     */
    /** Disables close of popover when leaving trigger element and mouse over the popover */
    /**
     * Disables close of popover when leaving trigger element and mouse over the popover
     * @return {?}
     */
    MdePopover.prototype.onMouseOver = /**
     * Disables close of popover when leaving trigger element and mouse over the popover
     * @return {?}
     */
    function () {
        if (this.triggerEvent === 'hover') {
            this.closeDisabled = true;
        }
    };
    /** Enables close of popover when mouse leaving popover element */
    /**
     * Enables close of popover when mouse leaving popover element
     * @return {?}
     */
    MdePopover.prototype.onMouseLeave = /**
     * Enables close of popover when mouse leaving popover element
     * @return {?}
     */
    function () {
        if (this.triggerEvent === 'hover') {
            this.closeDisabled = false;
            this._emitCloseEvent();
        }
    };
    // TODO: Refactor how styles are set and updated on the component, use best practices.
    // TODO: If arrow left and right positioning is requested, see if flex direction can be used to work with order.
    /** Sets the current styles for the popover to allow for dynamically changing settings */
    /**
     * Sets the current styles for the popover to allow for dynamically changing settings
     * @return {?}
     */
    MdePopover.prototype.setCurrentStyles = /**
     * Sets the current styles for the popover to allow for dynamically changing settings
     * @return {?}
     */
    function () {
        // TODO: See if arrow position can be calculated automatically and allow override.
        // TODO: See if flex order is a better alternative to position arrow top or bottom.
        this.popoverArrowStyles = {
            'right': this.positionX === 'before' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',
            'left': this.positionX === 'after' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',
            'border-top': this.positionY === 'below' ?
                this.arrowWidth + 'px solid ' + this.arrowColor : '0px solid transparent',
            'border-right': 'undefined' === undefined ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
            'border-bottom': this.positionY === 'above' ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
            'border-left': 'undefined' === undefined ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
        };
        // TODO: Remove if flex order is added.
        this.popoverContentStyles = {
            'padding-top': this.overlapTrigger === true ? '0px' : this.arrowWidth + 'px',
            'padding-bottom': this.overlapTrigger === true ? '0px' : (this.arrowWidth) + 'px',
            'margin-top': this.overlapTrigger === false && this.positionY === 'below' && this.containerPositioning === false ?
                -(this.arrowWidth * 2) + 'px' : '0px'
        };
    };
    /**
     * It's necessary to set position-based classes to ensure the popover panel animation
     * folds out from the correct direction.
     */
    /**
     * It's necessary to set position-based classes to ensure the popover panel animation
     * folds out from the correct direction.
     * @param {?=} posX
     * @param {?=} posY
     * @return {?}
     */
    MdePopover.prototype.setPositionClasses = /**
     * It's necessary to set position-based classes to ensure the popover panel animation
     * folds out from the correct direction.
     * @param {?=} posX
     * @param {?=} posY
     * @return {?}
     */
    function (posX, posY) {
        if (posX === void 0) { posX = this.positionX; }
        if (posY === void 0) { posY = this.positionY; }
        this._classList['mde-popover-before'] = posX === 'before';
        this._classList['mde-popover-after'] = posX === 'after';
        this._classList['mde-popover-above'] = posY === 'above';
        this._classList['mde-popover-below'] = posY === 'below';
    };
    MdePopover.decorators = [
        { type: Component, args: [{
                    selector: 'mde-popover',
                    template: "<ng-template>\n  <div class=\"mde-popover-panel\" role=\"dialog\" [class.mde-popover-overlap]=\"overlapTrigger\"\n       [ngClass]=\"_classList\" [ngStyle]=\"popoverPanelStyles\" (keydown)=\"_handleKeydown($event)\"\n       (click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\"\n       [@transformPopover]=\"'enter'\">\n    <div class=\"mde-popover-direction-arrow\" [ngStyle]=\"popoverArrowStyles\" *ngIf=\"!overlapTrigger\"></div>\n    <div class=\"mde-popover-content\" [ngStyle]=\"popoverContentStyles\" cdkTrapFocus=\"focusTrapEnabled\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n",
                    styles: [".mde-popover-panel{display:flex;flex-direction:column;max-height:calc(100vh + 48px)}.mde-popover-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mde-popover-below .mde-popover-direction-arrow{position:absolute;bottom:0;width:0;height:0;border-bottom-width:0!important;z-index:99999}.mde-popover-above .mde-popover-direction-arrow{position:absolute;top:0;width:0;height:0;border-top-width:0!important;z-index:99999}.mde-popover-after .mde-popover-direction-arrow{left:20px}.mde-popover-before .mde-popover-direction-arrow{right:20px}"],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    animations: [
                        transformPopover
                    ],
                    exportAs: 'mdePopover'
                },] },
    ];
    /** @nocollapse */
    MdePopover.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    MdePopover.propDecorators = {
        "role": [{ type: HostBinding, args: ['attr.role',] },],
        "positionX": [{ type: Input, args: ['mdePopoverPositionX',] },],
        "positionY": [{ type: Input, args: ['mdePopoverPositionY',] },],
        "triggerEvent": [{ type: Input, args: ['mdePopoverTriggerOn',] },],
        "enterDelay": [{ type: Input, args: ['mdePopoverEnterDelay',] },],
        "leaveDelay": [{ type: Input, args: ['mdePopoverLeaveDelay',] },],
        "overlapTrigger": [{ type: Input, args: ['mdePopoverOverlapTrigger',] },],
        "targetOffsetX": [{ type: Input, args: ['mdePopoverOffsetX',] },],
        "targetOffsetY": [{ type: Input, args: ['mdePopoverOffsetY',] },],
        "arrowOffsetX": [{ type: Input, args: ['mdePopoverArrowOffsetX',] },],
        "arrowWidth": [{ type: Input, args: ['mdePopoverArrowWidth',] },],
        "arrowColor": [{ type: Input, args: ['mdePopoverArrowColor',] },],
        "closeOnClick": [{ type: Input, args: ['mdePopoverCloseOnClick',] },],
        "focusTrapEnabled": [{ type: Input, args: ['mdeFocusTrapEnabled',] },],
        "panelClass": [{ type: Input, args: ['class',] },],
        "classList": [{ type: Input },],
        "close": [{ type: Output },],
        "templateRef": [{ type: ViewChild, args: [TemplateRef,] },],
    };
    return MdePopover;
}());
export { MdePopover };
function MdePopover_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MdePopover.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MdePopover.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    MdePopover.propDecorators;
    /** @type {?} */
    MdePopover.prototype.role;
    /**
     * Settings for popover, view setters and getters for more detail
     * @type {?}
     */
    MdePopover.prototype._positionX;
    /** @type {?} */
    MdePopover.prototype._positionY;
    /** @type {?} */
    MdePopover.prototype._triggerEvent;
    /** @type {?} */
    MdePopover.prototype._enterDelay;
    /** @type {?} */
    MdePopover.prototype._leaveDelay;
    /** @type {?} */
    MdePopover.prototype._overlapTrigger;
    /** @type {?} */
    MdePopover.prototype._targetOffsetX;
    /** @type {?} */
    MdePopover.prototype._targetOffsetY;
    /** @type {?} */
    MdePopover.prototype._arrowOffsetX;
    /** @type {?} */
    MdePopover.prototype._arrowWidth;
    /** @type {?} */
    MdePopover.prototype._arrowColor;
    /** @type {?} */
    MdePopover.prototype._closeOnClick;
    /** @type {?} */
    MdePopover.prototype._focusTrapEnabled;
    /**
     * Config object to be passed into the popover's ngClass
     * @type {?}
     */
    MdePopover.prototype._classList;
    /**
     *
     * @type {?}
     */
    MdePopover.prototype.containerPositioning;
    /**
     * Closing disabled on popover
     * @type {?}
     */
    MdePopover.prototype.closeDisabled;
    /**
     * Config object to be passed into the popover's arrow ngStyle
     * @type {?}
     */
    MdePopover.prototype.popoverPanelStyles;
    /**
     * Config object to be passed into the popover's arrow ngStyle
     * @type {?}
     */
    MdePopover.prototype.popoverArrowStyles;
    /**
     * Config object to be passed into the popover's content ngStyle
     * @type {?}
     */
    MdePopover.prototype.popoverContentStyles;
    /**
     * Emits the current animation state whenever it changes.
     * @type {?}
     */
    MdePopover.prototype._onAnimationStateChange;
    /**
     * Event emitted when the popover is closed.
     * @type {?}
     */
    MdePopover.prototype.close;
    /** @type {?} */
    MdePopover.prototype.templateRef;
    /** @type {?} */
    MdePopover.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,