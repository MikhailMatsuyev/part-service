/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, Optional, Output, ViewContainerRef, HostListener, HostBinding, } from '@angular/core';
import { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { throwMdePopoverMissingError } from './popover-errors';
/**
 * This directive is intended to be used in conjunction with an mde-popover tag. It is
 * responsible for toggling the display of the provided popover instance.
 */
var MdePopoverTrigger = /** @class */ (function () {
    function MdePopoverTrigger(_overlay, _elementRef, _viewContainerRef, _dir) {
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._dir = _dir;
        // tslint:disable-line:directive-class-suffix
        this.ariaHaspopup = true;
        this._overlayRef = null;
        this._popoverOpen = false;
        this._halt = false;
        this._openedByMouse = false;
        /**
         * Event emitted when the associated popover is opened.
         */
        this.opened = new EventEmitter();
        /**
         * Event emitted when the associated popover is closed.
         */
        this.closed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MdePopoverTrigger.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._checkPopover();
        this._setCurrentConfig();
        this.popover.close.subscribe(function () { return _this.closePopover(); });
    };
    /**
     * @return {?}
     */
    MdePopoverTrigger.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { this.destroyPopover(); };
    /**
     * @return {?}
     */
    MdePopoverTrigger.prototype._setCurrentConfig = /**
     * @return {?}
     */
    function () {
        if (this.positionX === 'before' || this.positionX === 'after') {
            this.popover.positionX = this.positionX;
        }
        if (this.positionY === 'above' || this.positionY === 'below') {
            this.popover.positionY = this.positionY;
        }
        if (this.triggerEvent) {
            this.popover.triggerEvent = this.triggerEvent;
        }
        if (this.enterDelay) {
            this.popover.enterDelay = this.enterDelay;
        }
        if (this.leaveDelay) {
            this.popover.leaveDelay = this.leaveDelay;
        }
        if (this.overlapTrigger === true || this.overlapTrigger === false) {
            this.popover.overlapTrigger = this.overlapTrigger;
        }
        if (this.targetOffsetX) {
            this.popover.targetOffsetX = this.targetOffsetX;
        }
        if (this.targetOffsetY) {
            this.popover.targetOffsetY = this.targetOffsetY;
        }
        if (this.arrowOffsetX) {
            this.popover.arrowOffsetX = this.arrowOffsetX;
        }
        if (this.arrowWidth) {
            this.popover.arrowWidth = this.arrowWidth;
        }
        if (this.arrowColor) {
            this.popover.arrowColor = this.arrowColor;
        }
        if (this.closeOnClick === true || this.closeOnClick === false) {
            this.popover.closeOnClick = this.closeOnClick;
        }
        this.popover.setCurrentStyles();
    };
    Object.defineProperty(MdePopoverTrigger.prototype, "popoverOpen", {
        /** Whether the popover is open. */
        get: /**
         * Whether the popover is open.
         * @return {?}
         */
        function () { return this._popoverOpen; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdePopoverTrigger.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.popover.triggerEvent === 'click') {
            // this.popover.setCurrentStyles();
            // this._setCurrentConfig();
            this.togglePopover();
        }
    };
    /**
     * @return {?}
     */
    MdePopoverTrigger.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._halt = false;
        if (this.popover.triggerEvent === 'hover') {
            this._mouseoverTimer = setTimeout(function () {
                _this.openPopover();
            }, this.popover.enterDelay);
        }
    };
    /**
     * @return {?}
     */
    MdePopoverTrigger.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.popover.triggerEvent === 'hover') {
            if (this._mouseoverTimer) {
                clearTimeout(this._mouseoverTimer);
                this._mouseoverTimer = null;
            }
            if (this._popoverOpen) {
                setTimeout(function () {
                    if (!_this.popover.closeDisabled) {
                        _this.closePopover();
                    }
                }, this.popover.leaveDelay);
            }
            else {
                this._halt = true;
            }
        }
    };
    /** Toggles the popover between the open and closed states. */
    /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    MdePopoverTrigger.prototype.togglePopover = /**
     * Toggles the popover between the open and closed states.
     * @return {?}
     */
    function () {
        return this._popoverOpen ? this.closePopover() : this.openPopover();
    };
    /** Opens the popover. */
    /**
     * Opens the popover.
     * @return {?}
     */
    MdePopoverTrigger.prototype.openPopover = /**
     * Opens the popover.
     * @return {?}
     */
    function () {
        if (!this._popoverOpen && !this._halt) {
            this._createOverlay().attach(this._portal);
            /** Only subscribe to backdrop if trigger event is click */
            if (this.triggerEvent === 'click') {
                this._subscribeToBackdrop();
            }
            this._initPopover();
        }
    };
    /** Closes the popover. */
    /**
     * Closes the popover.
     * @return {?}
     */
    MdePopoverTrigger.prototype.closePopover = /**
     * Closes the popover.
     * @return {?}
     */
    function () {
        if (this._overlayRef) {
            this._overlayRef.detach();
            /** Only unsubscribe to backdrop if trigger event is click */
            if (this.triggerEvent === 'click') {
                this._backdropSubscription.unsubscribe();
            }
            this._resetPopover();
        }
    };
    /** Removes the popover from the DOM. */
    /**
     * Removes the popover from the DOM.
     * @return {?}
     */
    MdePopoverTrigger.prototype.destroyPopover = /**
     * Removes the popover from the DOM.
     * @return {?}
     */
    function () {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
            this._cleanUpSubscriptions();
        }
    };
    /** Focuses the popover trigger. */
    /**
     * Focuses the popover trigger.
     * @return {?}
     */
    MdePopoverTrigger.prototype.focus = /**
     * Focuses the popover trigger.
     * @return {?}
     */
    function () {
        this._elementRef.nativeElement.focus();
    };
    Object.defineProperty(MdePopoverTrigger.prototype, "dir", {
        /** The text direction of the containing app. */
        get: /**
         * The text direction of the containing app.
         * @return {?}
         */
        function () {
            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method ensures that the popover closes when the overlay backdrop is clicked.
     * We do not use first() here because doing so would not catch clicks from within
     * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe
     * explicitly when the popover is closed or destroyed.
     * @return {?}
     */
    MdePopoverTrigger.prototype._subscribeToBackdrop = /**
     * This method ensures that the popover closes when the overlay backdrop is clicked.
     * We do not use first() here because doing so would not catch clicks from within
     * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe
     * explicitly when the popover is closed or destroyed.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._overlayRef) {
            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {
                _this.popover._emitCloseEvent();
            });
        }
    };
    /**
     * This method sets the popover state to open and focuses the first item if
     * the popover was opened via the keyboard.
     * @return {?}
     */
    MdePopoverTrigger.prototype._initPopover = /**
     * This method sets the popover state to open and focuses the first item if
     * the popover was opened via the keyboard.
     * @return {?}
     */
    function () {
        this._setIsPopoverOpen(true);
    };
    /**
     * This method resets the popover when it's closed, most importantly restoring
     * focus to the popover trigger if the popover was opened via the keyboard.
     * @return {?}
     */
    MdePopoverTrigger.prototype._resetPopover = /**
     * This method resets the popover when it's closed, most importantly restoring
     * focus to the popover trigger if the popover was opened via the keyboard.
     * @return {?}
     */
    function () {
        this._setIsPopoverOpen(false);
        // Focus only needs to be reset to the host element if the popover was opened
        // by the keyboard and manually shifted to the first popover item.
        if (!this._openedByMouse) {
            this.focus();
        }
        this._openedByMouse = false;
    };
    /**
     * set state rather than toggle to support triggers sharing a popover
     * @param {?} isOpen
     * @return {?}
     */
    MdePopoverTrigger.prototype._setIsPopoverOpen = /**
     * set state rather than toggle to support triggers sharing a popover
     * @param {?} isOpen
     * @return {?}
     */
    function (isOpen) {
        this._popoverOpen = isOpen;
        this._popoverOpen ? this.opened.emit() : this.closed.emit();
    };
    /**
     *  This method checks that a valid instance of MdPopover has been passed into
     *  mdPopoverTriggerFor. If not, an exception is thrown.
     * @return {?}
     */
    MdePopoverTrigger.prototype._checkPopover = /**
     *  This method checks that a valid instance of MdPopover has been passed into
     *  mdPopoverTriggerFor. If not, an exception is thrown.
     * @return {?}
     */
    function () {
        if (!this.popover) {
            throwMdePopoverMissingError();
        }
    };
    /**
     *  This method creates the overlay from the provided popover's template and saves its
     *  OverlayRef so that it can be attached to the DOM when openPopover is called.
     * @return {?}
     */
    MdePopoverTrigger.prototype._createOverlay = /**
     *  This method creates the overlay from the provided popover's template and saves its
     *  OverlayRef so that it can be attached to the DOM when openPopover is called.
     * @return {?}
     */
    function () {
        if (!this._overlayRef) {
            this._portal = new TemplatePortal(this.popover.templateRef, this._viewContainerRef);
            var /** @type {?} */ config = this._getOverlayConfig();
            this._subscribeToPositions(/** @type {?} */ (config.positionStrategy));
            this._overlayRef = this._overlay.create(config);
        }
        return this._overlayRef;
    };
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayConfig.
     * @return {?} OverlayConfig
     */
    MdePopoverTrigger.prototype._getOverlayConfig = /**
     * This method builds the configuration object needed to create the overlay, the OverlayConfig.
     * @return {?} OverlayConfig
     */
    function () {
        var /** @type {?} */ overlayState = new OverlayConfig();
        overlayState.positionStrategy = this._getPosition();
        /** Display overlay backdrop if trigger event is click */
        if (this.triggerEvent === 'click') {
            overlayState.hasBackdrop = true;
            overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';
        }
        overlayState.direction = this.dir;
        overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();
        return overlayState;
    };
    /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the popover based on the new position. This ensures the animation origin is always
     * correct, even if a fallback position is used for the overlay.
     * @param {?} position
     * @return {?}
     */
    MdePopoverTrigger.prototype._subscribeToPositions = /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the popover based on the new position. This ensures the animation origin is always
     * correct, even if a fallback position is used for the overlay.
     * @param {?} position
     * @return {?}
     */
    function (position) {
        var _this = this;
        this._positionSubscription = position.positionChanges.subscribe(function (change) {
            var /** @type {?} */ posisionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
            var /** @type {?} */ posisionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
            if (!_this.popover.overlapTrigger) {
                posisionY = posisionY === 'below' ? 'above' : 'below';
            }
            _this.popover.positionX = posisionX;
            _this.popover.positionY = posisionY;
            _this.popover.setCurrentStyles();
            _this.popover.setPositionClasses(posisionX, posisionY);
        });
    };
    /**
     * This method builds the position strategy for the overlay, so the popover is properly connected
     * to the trigger.
     * @return {?} ConnectedPositionStrategy
     */
    MdePopoverTrigger.prototype._getPosition = /**
     * This method builds the position strategy for the overlay, so the popover is properly connected
     * to the trigger.
     * @return {?} ConnectedPositionStrategy
     */
    function () {
        var _a = tslib_1.__read(this.popover.positionX === 'before' ? ['end', 'start'] : ['start', 'end'], 2), originX = _a[0], originFallbackX = _a[1];
        var _b = tslib_1.__read(this.popover.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], 2), overlayY = _b[0], overlayFallbackY = _b[1];
        // let originY = overlayY;
        // let fallbackOriginY = overlayFallbackY;
        var /** @type {?} */ originY = overlayY;
        var /** @type {?} */ originFallbackY = overlayFallbackY;
        var /** @type {?} */ overlayX = originX;
        var /** @type {?} */ overlayFallbackX = originFallbackX;
        // let [originY, originFallbackY] = [overlayY, overlayFallbackY];
        // let [overlayX, overlayFallbackX] = [originX, originFallbackX];
        /** Reverse overlayY and fallbackOverlayY when overlapTrigger is false */
        if (!this.popover.overlapTrigger) {
            originY = overlayY === 'top' ? 'bottom' : 'top';
            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
        }
        var /** @type {?} */ offsetX = 0;
        var /** @type {?} */ offsetY = 0;
        if (this.popover.targetOffsetX && !isNaN(Number(this.popover.targetOffsetX))) {
            offsetX = Number(this.popover.targetOffsetX);
            // offsetX = -16;
        }
        if (this.popover.targetOffsetY && !isNaN(Number(this.popover.targetOffsetY))) {
            offsetY = Number(this.popover.targetOffsetY);
            // offsetY = -10;
        }
        /**
         * For overriding position element, when mdePopoverTargetAt has a valid element reference.
         * Useful for sticking popover to parent element and offsetting arrow to trigger element.
         * If undefined defaults to the trigger element reference.
         */
        var /** @type {?} */ element = this._elementRef;
        if (typeof this.targetElement !== 'undefined') {
            this.popover.containerPositioning = true;
            element = this.targetElement._elementRef;
        }
        return this._overlay.position()
            .flexibleConnectedTo(element)
            .withPositions([
            {
                originX: originX,
                originY: originY,
                overlayX: overlayX,
                overlayY: overlayY,
                offsetY: offsetY
            },
            {
                originX: originFallbackX,
                originY: originY,
                overlayX: overlayFallbackX,
                overlayY: overlayY,
                offsetY: offsetY
            },
            {
                originX: originX,
                originY: originFallbackY,
                overlayX: overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            }
        ])
            .withDefaultOffsetX(offsetX)
            .withDefaultOffsetY(offsetY);
        /*
                return this._overlay.position()
                  .connectedTo(element,
                      {originX: posX, originY: originY},
                      {overlayX: posX, overlayY: overlayY})
                  .withFallbackPosition(
                      {originX: fallbackX, originY: originY},
                      {overlayX: fallbackX, overlayY: overlayY})
                  .withFallbackPosition(
                      {originX: posX, originY: fallbackOriginY},
                      {overlayX: posX, overlayY: fallbackOverlayY})
                  .withFallbackPosition(
                      {originX: fallbackX, originY: fallbackOriginY},
                      {overlayX: fallbackX, overlayY: fallbackOverlayY})
                  .withOffsetX(offsetX)
                  .withOffsetY(offsetY);
                  */
    };
    /**
     * @return {?}
     */
    MdePopoverTrigger.prototype._cleanUpSubscriptions = /**
     * @return {?}
     */
    function () {
        if (this._backdropSubscription) {
            this._backdropSubscription.unsubscribe();
        }
        if (this._positionSubscription) {
            this._positionSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MdePopoverTrigger.prototype._handleMousedown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && !isFakeMousedownFromScreenReader(event)) {
            this._openedByMouse = true;
        }
    };
    MdePopoverTrigger.decorators = [
        { type: Directive, args: [{
                    selector: '[mdePopoverTriggerFor]',
                    exportAs: 'mdePopoverTrigger'
                },] },
    ];
    /** @nocollapse */
    MdePopoverTrigger.ctorParameters = function () { return [
        { type: Overlay, },
        { type: ElementRef, },
        { type: ViewContainerRef, },
        { type: Directionality, decorators: [{ type: Optional },] },
    ]; };
    MdePopoverTrigger.propDecorators = {
        "ariaHaspopup": [{ type: HostBinding, args: ['attr.aria-haspopup',] },],
        "popover": [{ type: Input, args: ['mdePopoverTriggerFor',] },],
        "targetElement": [{ type: Input, args: ['mdePopoverTargetAt',] },],
        "positionX": [{ type: Input, args: ['mdePopoverPositionX',] },],
        "positionY": [{ type: Input, args: ['mdePopoverPositionY',] },],
        "triggerEvent": [{ type: Input, args: ['mdePopoverTriggerOn',] },],
        "enterDelay": [{ type: Input, args: ['mdePopoverEnterDelay',] },],
        "leaveDelay": [{ type: Input, args: ['mdePopoverLeaveDelay',] },],
        "overlapTrigger": [{ type: Input, args: ['mdePopoverOverlapTrigger',] },],
        "targetOffsetX": [{ type: Input, args: ['mdePopoverOffsetX',] },],
        "targetOffsetY": [{ type: Input, args: ['mdePopoverOffsetY',] },],
        "arrowOffsetX": [{ type: Input, args: ['mdePopoverArrowOffsetX',] },],
        "arrowWidth": [{ type: Input, args: ['mdePopoverArrowWidth',] },],
        "arrowColor": [{ type: Input, args: ['mdePopoverArrowColor',] },],
        "closeOnClick": [{ type: Input, args: ['mdePopoverCloseOnClick',] },],
        "opened": [{ type: Output },],
        "closed": [{ type: Output },],
        "onClick": [{ type: HostListener, args: ['click',] },],
        "onMouseEnter": [{ type: HostListener, args: ['mouseenter',] },],
        "onMouseLeave": [{ type: HostListener, args: ['mouseleave',] },],
        "_handleMousedown": [{ type: HostListener, args: ['mousedown',] },],
    };
    return MdePopoverTrigger;
}());
export { MdePopoverTrigger };
function MdePopoverTrigger_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MdePopoverTrigger.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MdePopoverTrigger.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    MdePopoverTrigger.propDecorators;
    /** @type {?} */
    MdePopoverTrigger.prototype.ariaHaspopup;
    /** @type {?} */
    MdePopoverTrigger.prototype._portal;
    /** @type {?} */
    MdePopoverTrigger.prototype._overlayRef;
    /** @type {?} */
    MdePopoverTrigger.prototype._popoverOpen;
    /** @type {?} */
    MdePopoverTrigger.prototype._halt;
    /** @type {?} */
    MdePopoverTrigger.prototype._backdropSubscription;
    /** @type {?} */
    MdePopoverTrigger.prototype._positionSubscription;
    /** @type {?} */
    MdePopoverTrigger.prototype._mouseoverTimer;
    /** @type {?} */
    MdePopoverTrigger.prototype._openedByMouse;
    /**
     * References the popover instance that the trigger is associated with.
     * @type {?}
     */
    MdePopoverTrigger.prototype.popover;
    /**
     * References the popover target instance that the trigger is associated with.
     * @type {?}
     */
    MdePopoverTrigger.prototype.targetElement;
    /**
     * Position of the popover in the X axis
     * @type {?}
     */
    MdePopoverTrigger.prototype.positionX;
    /**
     * Position of the popover in the Y axis
     * @type {?}
     */
    MdePopoverTrigger.prototype.positionY;
    /**
     * Popover trigger event
     * @type {?}
     */
    MdePopoverTrigger.prototype.triggerEvent;
    /**
     * Popover delay
     * @type {?}
     */
    MdePopoverTrigger.prototype.enterDelay;
    /**
     * Popover delay
     * @type {?}
     */
    MdePopoverTrigger.prototype.leaveDelay;
    /**
     * Popover overlap trigger
     * @type {?}
     */
    MdePopoverTrigger.prototype.overlapTrigger;
    /**
     * Popover target offset x
     * @type {?}
     */
    MdePopoverTrigger.prototype.targetOffsetX;
    /**
     * Popover target offset y
     * @type {?}
     */
    MdePopoverTrigger.prototype.targetOffsetY;
    /**
     * Popover arrow offset x
     * @type {?}
     */
    MdePopoverTrigger.prototype.arrowOffsetX;
    /**
     * Popover arrow width
     * @type {?}
     */
    MdePopoverTrigger.prototype.arrowWidth;
    /**
     * Popover arrow color
     * @type {?}
     */
    MdePopoverTrigger.prototype.arrowColor;
    /**
     * Popover container close on click
     * @type {?}
     */
    MdePopoverTrigger.prototype.closeOnClick;
    /**
     * Event emitted when the associated popover is opened.
     * @type {?}
     */
    MdePopoverTrigger.prototype.opened;
    /**
     * Event emitted when the associated popover is closed.
     * @type {?}
     */
    MdePopoverTrigger.prototype.closed;
    /** @type {?} */
    MdePopoverTrigger.prototype._overlay;
    /** @type {?} */
    MdePopoverTrigger.prototype._elementRef;
    /** @type {?} */
    MdePopoverTrigger.prototype._viewContainerRef;
    /** @type {?} */
    MdePopoverTrigger.prototype._dir;
}

//# sourceMappingURL=data:application/json;base64,